/*
 * This file is generated by jOOQ.
 */
package database.tables;


import database.Indexes;
import database.Keys;
import database.Public;
import database.tables.records.AclObjectIdentityRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AclObjectIdentity extends TableImpl<AclObjectIdentityRecord> {

    private static final long serialVersionUID = 2100607450;

    /**
     * The reference instance of <code>public.acl_object_identity</code>
     */
    public static final AclObjectIdentity ACL_OBJECT_IDENTITY = new AclObjectIdentity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AclObjectIdentityRecord> getRecordType() {
        return AclObjectIdentityRecord.class;
    }

    /**
     * The column <code>public.acl_object_identity.id</code>.
     */
    public final TableField<AclObjectIdentityRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('acl_object_identity_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.acl_object_identity.object_id_class</code>.
     */
    public final TableField<AclObjectIdentityRecord, Long> OBJECT_ID_CLASS = createField(DSL.name("object_id_class"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.acl_object_identity.object_id_identity</code>.
     */
    public final TableField<AclObjectIdentityRecord, String> OBJECT_ID_IDENTITY = createField(DSL.name("object_id_identity"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.acl_object_identity.parent_object</code>.
     */
    public final TableField<AclObjectIdentityRecord, Long> PARENT_OBJECT = createField(DSL.name("parent_object"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.acl_object_identity.owner_sid</code>.
     */
    public final TableField<AclObjectIdentityRecord, Long> OWNER_SID = createField(DSL.name("owner_sid"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.acl_object_identity.entries_inheriting</code>.
     */
    public final TableField<AclObjectIdentityRecord, Boolean> ENTRIES_INHERITING = createField(DSL.name("entries_inheriting"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.acl_object_identity</code> table reference
     */
    public AclObjectIdentity() {
        this(DSL.name("acl_object_identity"), null);
    }

    /**
     * Create an aliased <code>public.acl_object_identity</code> table reference
     */
    public AclObjectIdentity(String alias) {
        this(DSL.name(alias), ACL_OBJECT_IDENTITY);
    }

    /**
     * Create an aliased <code>public.acl_object_identity</code> table reference
     */
    public AclObjectIdentity(Name alias) {
        this(alias, ACL_OBJECT_IDENTITY);
    }

    private AclObjectIdentity(Name alias, Table<AclObjectIdentityRecord> aliased) {
        this(alias, aliased, null);
    }

    private AclObjectIdentity(Name alias, Table<AclObjectIdentityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AclObjectIdentity(Table<O> child, ForeignKey<O, AclObjectIdentityRecord> key) {
        super(child, key, ACL_OBJECT_IDENTITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACL_OBJECT_IDENTITY_PKEY, Indexes.UNIQUE_UK_3);
    }

    @Override
    public Identity<AclObjectIdentityRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACL_OBJECT_IDENTITY;
    }

    @Override
    public UniqueKey<AclObjectIdentityRecord> getPrimaryKey() {
        return Keys.ACL_OBJECT_IDENTITY_PKEY;
    }

    @Override
    public List<UniqueKey<AclObjectIdentityRecord>> getKeys() {
        return Arrays.<UniqueKey<AclObjectIdentityRecord>>asList(Keys.ACL_OBJECT_IDENTITY_PKEY, Keys.UNIQUE_UK_3);
    }

    @Override
    public AclObjectIdentity as(String alias) {
        return new AclObjectIdentity(DSL.name(alias), this);
    }

    @Override
    public AclObjectIdentity as(Name alias) {
        return new AclObjectIdentity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AclObjectIdentity rename(String name) {
        return new AclObjectIdentity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AclObjectIdentity rename(Name name) {
        return new AclObjectIdentity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Long, Long, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
