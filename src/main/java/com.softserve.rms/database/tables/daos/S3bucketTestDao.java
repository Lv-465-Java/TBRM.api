/*
 * This file is generated by jOOQ.
 */
package database.tables.daos;


import database.tables.S3bucketTest;
import database.tables.records.S3bucketTestRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S3bucketTestDao extends DAOImpl<S3bucketTestRecord, database.tables.pojos.S3bucketTest, Long> {

    /**
     * Create a new S3bucketTestDao without any configuration
     */
    public S3bucketTestDao() {
        super(S3bucketTest.S3BUCKET_TEST, database.tables.pojos.S3bucketTest.class);
    }

    /**
     * Create a new S3bucketTestDao with an attached configuration
     */
    public S3bucketTestDao(Configuration configuration) {
        super(S3bucketTest.S3BUCKET_TEST, database.tables.pojos.S3bucketTest.class, configuration);
    }

    @Override
    public Long getId(database.tables.pojos.S3bucketTest object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.S3bucketTest> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(S3bucketTest.S3BUCKET_TEST.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<database.tables.pojos.S3bucketTest> fetchById(Long... values) {
        return fetch(S3bucketTest.S3BUCKET_TEST.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public database.tables.pojos.S3bucketTest fetchOneById(Long value) {
        return fetchOne(S3bucketTest.S3BUCKET_TEST.ID, value);
    }

    /**
     * Fetch records that have <code>file_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.S3bucketTest> fetchRangeOfFileName(String lowerInclusive, String upperInclusive) {
        return fetchRange(S3bucketTest.S3BUCKET_TEST.FILE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>file_name IN (values)</code>
     */
    public List<database.tables.pojos.S3bucketTest> fetchByFileName(String... values) {
        return fetch(S3bucketTest.S3BUCKET_TEST.FILE_NAME, values);
    }

    /**
     * Fetch records that have <code>resource_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.S3bucketTest> fetchRangeOfResourceName(String lowerInclusive, String upperInclusive) {
        return fetchRange(S3bucketTest.S3BUCKET_TEST.RESOURCE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>resource_name IN (values)</code>
     */
    public List<database.tables.pojos.S3bucketTest> fetchByResourceName(String... values) {
        return fetch(S3bucketTest.S3BUCKET_TEST.RESOURCE_NAME, values);
    }
}
