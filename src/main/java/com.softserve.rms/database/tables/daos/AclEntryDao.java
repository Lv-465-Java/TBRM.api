/*
 * This file is generated by jOOQ.
 */
package database.tables.daos;


import database.tables.AclEntry;
import database.tables.records.AclEntryRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AclEntryDao extends DAOImpl<AclEntryRecord, database.tables.pojos.AclEntry, Long> {

    /**
     * Create a new AclEntryDao without any configuration
     */
    public AclEntryDao() {
        super(AclEntry.ACL_ENTRY, database.tables.pojos.AclEntry.class);
    }

    /**
     * Create a new AclEntryDao with an attached configuration
     */
    public AclEntryDao(Configuration configuration) {
        super(AclEntry.ACL_ENTRY, database.tables.pojos.AclEntry.class, configuration);
    }

    @Override
    public Long getId(database.tables.pojos.AclEntry object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.AclEntry> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(AclEntry.ACL_ENTRY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<database.tables.pojos.AclEntry> fetchById(Long... values) {
        return fetch(AclEntry.ACL_ENTRY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public database.tables.pojos.AclEntry fetchOneById(Long value) {
        return fetchOne(AclEntry.ACL_ENTRY.ID, value);
    }

    /**
     * Fetch records that have <code>acl_object_identity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.AclEntry> fetchRangeOfAclObjectIdentity(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(AclEntry.ACL_ENTRY.ACL_OBJECT_IDENTITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>acl_object_identity IN (values)</code>
     */
    public List<database.tables.pojos.AclEntry> fetchByAclObjectIdentity(Long... values) {
        return fetch(AclEntry.ACL_ENTRY.ACL_OBJECT_IDENTITY, values);
    }

    /**
     * Fetch records that have <code>ace_order BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.AclEntry> fetchRangeOfAceOrder(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AclEntry.ACL_ENTRY.ACE_ORDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ace_order IN (values)</code>
     */
    public List<database.tables.pojos.AclEntry> fetchByAceOrder(Integer... values) {
        return fetch(AclEntry.ACL_ENTRY.ACE_ORDER, values);
    }

    /**
     * Fetch records that have <code>sid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.AclEntry> fetchRangeOfSid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(AclEntry.ACL_ENTRY.SID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sid IN (values)</code>
     */
    public List<database.tables.pojos.AclEntry> fetchBySid(Long... values) {
        return fetch(AclEntry.ACL_ENTRY.SID, values);
    }

    /**
     * Fetch records that have <code>mask BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.AclEntry> fetchRangeOfMask(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AclEntry.ACL_ENTRY.MASK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mask IN (values)</code>
     */
    public List<database.tables.pojos.AclEntry> fetchByMask(Integer... values) {
        return fetch(AclEntry.ACL_ENTRY.MASK, values);
    }

    /**
     * Fetch records that have <code>granting BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.AclEntry> fetchRangeOfGranting(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(AclEntry.ACL_ENTRY.GRANTING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>granting IN (values)</code>
     */
    public List<database.tables.pojos.AclEntry> fetchByGranting(Boolean... values) {
        return fetch(AclEntry.ACL_ENTRY.GRANTING, values);
    }

    /**
     * Fetch records that have <code>audit_success BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.AclEntry> fetchRangeOfAuditSuccess(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(AclEntry.ACL_ENTRY.AUDIT_SUCCESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>audit_success IN (values)</code>
     */
    public List<database.tables.pojos.AclEntry> fetchByAuditSuccess(Boolean... values) {
        return fetch(AclEntry.ACL_ENTRY.AUDIT_SUCCESS, values);
    }

    /**
     * Fetch records that have <code>audit_failure BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<database.tables.pojos.AclEntry> fetchRangeOfAuditFailure(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(AclEntry.ACL_ENTRY.AUDIT_FAILURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>audit_failure IN (values)</code>
     */
    public List<database.tables.pojos.AclEntry> fetchByAuditFailure(Boolean... values) {
        return fetch(AclEntry.ACL_ENTRY.AUDIT_FAILURE, values);
    }
}
