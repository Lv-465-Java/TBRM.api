/*
 * This file is generated by jOOQ.
 */
package com.softserve.rms.jooq.tables;


import com.softserve.rms.jooq.Indexes;
import com.softserve.rms.jooq.Keys;
import com.softserve.rms.jooq.Public;
import com.softserve.rms.jooq.tables.records.TablesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tables extends TableImpl<TablesRecord> {

    private static final long serialVersionUID = -1050874839;

    /**
     * The reference instance of <code>public.tables</code>
     */
    public static final Tables TABLES = new Tables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TablesRecord> getRecordType() {
        return TablesRecord.class;
    }

    /**
     * The column <code>public.tables.id</code>.
     */
    public final TableField<TablesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tables.name</code>.
     */
    public final TableField<TablesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tables.description</code>.
     */
    public final TableField<TablesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tables.resource_template_id</code>.
     */
    public final TableField<TablesRecord, Long> RESOURCE_TEMPLATE_ID = createField(DSL.name("resource_template_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tables.user_id</code>.
     */
    public final TableField<TablesRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tables.is_located_in_room_ref</code>.
     */
    public final TableField<TablesRecord, Integer> IS_LOCATED_IN_ROOM_REF = createField(DSL.name("is_located_in_room_ref"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tables.shape</code>.
     */
    public final TableField<TablesRecord, String> SHAPE = createField(DSL.name("shape"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.tables</code> table reference
     */
    public Tables() {
        this(DSL.name("tables"), null);
    }

    /**
     * Create an aliased <code>public.tables</code> table reference
     */
    public Tables(String alias) {
        this(DSL.name(alias), TABLES);
    }

    /**
     * Create an aliased <code>public.tables</code> table reference
     */
    public Tables(Name alias) {
        this(alias, TABLES);
    }

    private Tables(Name alias, Table<TablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tables(Name alias, Table<TablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tables(Table<O> child, ForeignKey<O, TablesRecord> key) {
        super(child, key, TABLES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_ID);
    }

    @Override
    public UniqueKey<TablesRecord> getPrimaryKey() {
        return Keys.PK_ID;
    }

    @Override
    public List<UniqueKey<TablesRecord>> getKeys() {
        return Arrays.<UniqueKey<TablesRecord>>asList(Keys.PK_ID);
    }

    @Override
    public Tables as(String alias) {
        return new Tables(DSL.name(alias), this);
    }

    @Override
    public Tables as(Name alias) {
        return new Tables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tables rename(String name) {
        return new Tables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tables rename(Name name) {
        return new Tables(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, Long, Long, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
