/*
 * This file is generated by jOOQ.
 */
package com.softserve.rms.jooq.tables;


import com.softserve.rms.jooq.Indexes;
import com.softserve.rms.jooq.Keys;
import com.softserve.rms.jooq.Public;
import com.softserve.rms.jooq.tables.records.ResourceParametersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceParameters extends TableImpl<ResourceParametersRecord> {

    private static final long serialVersionUID = 915027470;

    /**
     * The reference instance of <code>public.resource_parameters</code>
     */
    public static final ResourceParameters RESOURCE_PARAMETERS = new ResourceParameters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceParametersRecord> getRecordType() {
        return ResourceParametersRecord.class;
    }

    /**
     * The column <code>public.resource_parameters.id</code>.
     */
    public final TableField<ResourceParametersRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('resource_parameters_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.resource_parameters.column_name</code>.
     */
    public final TableField<ResourceParametersRecord, String> COLUMN_NAME = createField(DSL.name("column_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.resource_parameters.name</code>.
     */
    public final TableField<ResourceParametersRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.resource_parameters.field_type</code>.
     */
    public final TableField<ResourceParametersRecord, String> FIELD_TYPE = createField(DSL.name("field_type"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.resource_parameters.pattern</code>.
     */
    public final TableField<ResourceParametersRecord, String> PATTERN = createField(DSL.name("pattern"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.resource_parameters.resource_template_id</code>.
     */
    public final TableField<ResourceParametersRecord, Long> RESOURCE_TEMPLATE_ID = createField(DSL.name("resource_template_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.resource_parameters</code> table reference
     */
    public ResourceParameters() {
        this(DSL.name("resource_parameters"), null);
    }

    /**
     * Create an aliased <code>public.resource_parameters</code> table reference
     */
    public ResourceParameters(String alias) {
        this(DSL.name(alias), RESOURCE_PARAMETERS);
    }

    /**
     * Create an aliased <code>public.resource_parameters</code> table reference
     */
    public ResourceParameters(Name alias) {
        this(alias, RESOURCE_PARAMETERS);
    }

    private ResourceParameters(Name alias, Table<ResourceParametersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResourceParameters(Name alias, Table<ResourceParametersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ResourceParameters(Table<O> child, ForeignKey<O, ResourceParametersRecord> key) {
        super(child, key, RESOURCE_PARAMETERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESOURCE_PARAMETERS_PKEY);
    }

    @Override
    public Identity<ResourceParametersRecord, Long> getIdentity() {
        return Keys.IDENTITY_RESOURCE_PARAMETERS;
    }

    @Override
    public UniqueKey<ResourceParametersRecord> getPrimaryKey() {
        return Keys.RESOURCE_PARAMETERS_PKEY;
    }

    @Override
    public List<UniqueKey<ResourceParametersRecord>> getKeys() {
        return Arrays.<UniqueKey<ResourceParametersRecord>>asList(Keys.RESOURCE_PARAMETERS_PKEY);
    }

    @Override
    public ResourceParameters as(String alias) {
        return new ResourceParameters(DSL.name(alias), this);
    }

    @Override
    public ResourceParameters as(Name alias) {
        return new ResourceParameters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceParameters rename(String name) {
        return new ResourceParameters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceParameters rename(Name name) {
        return new ResourceParameters(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
