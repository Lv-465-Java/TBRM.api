/*
 * This file is generated by jOOQ.
 */
package com.softserve.rms.jooq.tables.daos;


import com.softserve.rms.jooq.tables.Room;
import com.softserve.rms.jooq.tables.records.RoomRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoomDao extends DAOImpl<RoomRecord, com.softserve.rms.jooq.tables.pojos.Room, Long> {

    /**
     * Create a new RoomDao without any configuration
     */
    public RoomDao() {
        super(Room.ROOM, com.softserve.rms.jooq.tables.pojos.Room.class);
    }

    /**
     * Create a new RoomDao with an attached configuration
     */
    public RoomDao(Configuration configuration) {
        super(Room.ROOM, com.softserve.rms.jooq.tables.pojos.Room.class, configuration);
    }

    @Override
    public Long getId(com.softserve.rms.jooq.tables.pojos.Room object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Room.ROOM.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchById(Long... values) {
        return fetch(Room.ROOM.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.softserve.rms.jooq.tables.pojos.Room fetchOneById(Long value) {
        return fetchOne(Room.ROOM.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Room.ROOM.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchByName(String... values) {
        return fetch(Room.ROOM.NAME, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Room.ROOM.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchByDescription(String... values) {
        return fetch(Room.ROOM.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchRangeOfNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Room.ROOM.NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>number IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchByNumber(Integer... values) {
        return fetch(Room.ROOM.NUMBER, values);
    }

    /**
     * Fetch records that have <code>testint BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchRangeOfTestint(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Room.ROOM.TESTINT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>testint IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Room> fetchByTestint(Integer... values) {
        return fetch(Room.ROOM.TESTINT, values);
    }
}
