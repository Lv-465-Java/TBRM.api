/*
 * This file is generated by jOOQ.
 */
package com.softserve.rms.jooq.tables.daos;


import com.softserve.rms.jooq.tables.Users;
import com.softserve.rms.jooq.tables.records.UsersRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends DAOImpl<UsersRecord, com.softserve.rms.jooq.tables.pojos.Users, Long> {

    /**
     * Create a new UsersDao without any configuration
     */
    public UsersDao() {
        super(Users.USERS, com.softserve.rms.jooq.tables.pojos.Users.class);
    }

    /**
     * Create a new UsersDao with an attached configuration
     */
    public UsersDao(Configuration configuration) {
        super(Users.USERS, com.softserve.rms.jooq.tables.pojos.Users.class, configuration);
    }

    @Override
    public Long getId(com.softserve.rms.jooq.tables.pojos.Users object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchById(Long... values) {
        return fetch(Users.USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.softserve.rms.jooq.tables.pojos.Users fetchOneById(Long value) {
        return fetchOne(Users.USERS.ID, value);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchByEmail(String... values) {
        return fetch(Users.USERS.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public com.softserve.rms.jooq.tables.pojos.Users fetchOneByEmail(String value) {
        return fetchOne(Users.USERS.EMAIL, value);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Users.USERS.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchByEnabled(Boolean... values) {
        return fetch(Users.USERS.ENABLED, values);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchByFirstName(String... values) {
        return fetch(Users.USERS.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchByLastName(String... values) {
        return fetch(Users.USERS.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchByPassword(String... values) {
        return fetch(Users.USERS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchRangeOfPhone(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchByPhone(String... values) {
        return fetch(Users.USERS.PHONE, values);
    }

    /**
     * Fetch a unique record that has <code>phone = value</code>
     */
    public com.softserve.rms.jooq.tables.pojos.Users fetchOneByPhone(String value) {
        return fetchOne(Users.USERS.PHONE, value);
    }

    /**
     * Fetch records that have <code>role_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchRangeOfRoleId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.ROLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_id IN (values)</code>
     */
    public List<com.softserve.rms.jooq.tables.pojos.Users> fetchByRoleId(Long... values) {
        return fetch(Users.USERS.ROLE_ID, values);
    }
}
